version: '3.8'

services:
  # PostgreSQL База данных
  postgres:
    image: postgres:15-alpine
    container_name: mydoc_postgres
    environment:
      POSTGRES_DB: mydoc_loyalty
      POSTGRES_USER: mydoc_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mydoc_network
    restart: unless-stopped

  # Redis для кеширования
  redis:
    image: redis:7-alpine
    container_name: mydoc_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mydoc_network
    restart: unless-stopped

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mydoc_backend
    environment:
      DATABASE_URL: postgresql://mydoc_user:${DB_PASSWORD:-changeme123}@postgres:5432/mydoc_loyalty
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      BITRIX_API_URL: ${BITRIX_API_URL:-https://your-bitrix.ru}
      BITRIX_WEBHOOK: ${BITRIX_WEBHOOK:-}
      ONEC_API_URL: ${ONEC_API_URL:-http://your-1c-server}
      ONEC_USERNAME: ${ONEC_USERNAME:-}
      ONEC_PASSWORD: ${ONEC_PASSWORD:-}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMS_API_KEY: ${SMS_API_KEY:-}
      DOMAIN: it-mydoc.ru
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    networks:
      - mydoc_network
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mydoc_frontend
    environment:
      REACT_APP_API_URL: https://it-mydoc.ru/api
      REACT_APP_DOMAIN: it-mydoc.ru
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - mydoc_network
    restart: unless-stopped

  # Admin Panel
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: mydoc_admin
    environment:
      REACT_APP_API_URL: https://it-mydoc.ru/api
    ports:
      - "3001:80"
    depends_on:
      - backend
    networks:
      - mydoc_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mydoc_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./uploads:/usr/share/nginx/html/uploads
    depends_on:
      - backend
      - frontend
      - admin
    networks:
      - mydoc_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  mydoc_network:
    driver: bridge
