from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from pydantic import BaseModel
import httpx
import secrets

from database import get_db
from config import settings
from models import User
from routers.auth import create_access_token, get_password_hash, get_current_active_user

router = APIRouter()

class TokenVerifyRequest(BaseModel):
    token: str

@router.post("/verify-token")
async def verify_bitrix_token(
    request: TokenVerifyRequest,
    db: Session = Depends(get_db)
):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –æ—Ç Bitrix –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    import logging
    logger = logging.getLogger(__name__)
    
    try:
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Bitrix: {request.token[:20]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —É Bitrix
        async with httpx.AsyncClient() as client:
            logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {settings.bitrix_domain}/local/api/verify_token.php")
            response = await client.post(
                f"{settings.bitrix_domain}/local/api/verify_token.php",
                json={"token": request.token},
                timeout=10.0
            )
            logger.info(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            response.raise_for_status()
            result = response.json()
            logger.info(f"üìã –û—Ç–≤–µ—Ç Bitrix: {result}")
        
        if not result.get('success'):
            logger.error(f"‚ùå Bitrix –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.get('error')}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail=result.get('error', 'Invalid token')
            )
        
        user_data = result['user']
        bitrix_id = str(user_data['bitrix_id'])
        email = user_data['email']
        name = user_data.get('name', '')
        last_name = user_data.get('last_name', '')
        full_name = f"{name} {last_name}".strip() or email.split('@')[0]
        
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Bitrix: ID={bitrix_id}, Email={email}, –§–ò–û={full_name}")
        
        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.bitrix_id == bitrix_id).first()
        
        if not user:
            logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å bitrix_id={bitrix_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ email...")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ email
            user = db.query(User).filter(User.email == email).first()
            
            if user:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ email, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º bitrix_id")
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.bitrix_id = bitrix_id
                # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –ø—É—Å—Ç—ã–º
                if not user.full_name or user.full_name == email.split('@')[0]:
                    user.full_name = full_name
            else:
                logger.info(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email}")
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User(
                    email=email,
                    full_name=full_name,
                    password_hash=get_password_hash(secrets.token_urlsafe(16)),
                    bitrix_id=bitrix_id,
                    role="patient"
                )
            
            db.add(user)
            db.commit()
            db.refresh(user)
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ID={user.id}, Email={user.email}")
        else:
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ bitrix_id: ID={user.id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º login)
        access_token = create_access_token(data={"sub": str(user.id)})
        
        return {
            "success": True,
            "token": access_token,
            "user": {
                "id": user.id,
                "email": user.email,
                "role": user.role
            }
        }
        
    except httpx.HTTPError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Bitrix: {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Bitrix: {str(e)}"
        )
    except Exception as e:
        logger.error(f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ SSO: {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"
        )


@router.get("/bonus-balance")
async def get_bitrix_bonus_balance(
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ Bitrix"""
    
    import logging
    logger = logging.getLogger(__name__)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å bitrix_id
        if not current_user.bitrix_id:
            return {
                "success": False,
                "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Bitrix",
                "bonus_balance": 0
            }
        
        logger.info(f"üí∞ –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: bitrix_id={current_user.bitrix_id}")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —É Bitrix
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{settings.bitrix_domain}/local/api/get_bonuses.php",
                json={"user_id": current_user.bitrix_id},
                timeout=10.0
            )
            response.raise_for_status()
            result = response.json()
        
        logger.info(f"üì• –û—Ç–≤–µ—Ç Bitrix: {result}")
        
        if not result.get('success'):
            logger.error(f"‚ùå Bitrix –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.get('error')}")
            return {
                "success": False,
                "error": result.get('error', 'Unknown error'),
                "bonus_balance": 0
            }
        
        bonus_balance = round(float(result.get('bonus_balance', 0)), 2)
        
        logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω: {bonus_balance} –±–∞–ª–ª–æ–≤")
        
        return {
            "success": True,
            "bonus_balance": bonus_balance,
            "source": "bitrix"
        }
        
    except httpx.HTTPError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Bitrix: {str(e)}", exc_info=True)
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Bitrix: {str(e)}",
            "bonus_balance": 0
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}", exc_info=True)
        return {
            "success": False,
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}",
            "bonus_balance": 0
        }

