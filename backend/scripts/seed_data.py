#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
"""

import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import SessionLocal, Base, engine
from models import (
    User, LoyaltyAccount, LoyaltyTransaction, TransactionType,
    Certificate, CertificateStatus,
    ReferralCode, ReferralEvent, ReferralEventType, RewardRule, RewardType
)
from routers.auth import get_password_hash
import random


def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    Base.metadata.create_all(bind=engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")


def seed_reward_rules(db):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π"""
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π...")
    
    rules = [
        RewardRule(
            name="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞",
            description="–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
            event_type=ReferralEventType.REGISTRATION,
            referrer_type="any",
            reward_type=RewardType.POINTS,
            reward_value=100,
            applies_to_level=1,
            is_active=True
        ),
        RewardRule(
            name="–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞",
            description="–ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
            event_type=ReferralEventType.FIRST_VISIT,
            referrer_type="any",
            reward_type=RewardType.POINTS,
            reward_value=500,
            applies_to_level=1,
            is_active=True
        ),
        RewardRule(
            name="–û–ø–ª–∞—á–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ - –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞",
            description="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É–º–º—ã –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–º",
            event_type=ReferralEventType.PAID_SERVICE,
            referrer_type="patient",
            reward_type=RewardType.PERCENTAGE,
            reward_value=5.0,  # 5%
            applies_to_level=1,
            is_active=True
        ),
        RewardRule(
            name="–û–ø–ª–∞—á–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ - –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –≤—Ä–∞—á–∞",
            description="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É–º–º—ã –¥–ª—è –≤—Ä–∞—á–∞-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—è",
            event_type=ReferralEventType.PAID_SERVICE,
            referrer_type="doctor",
            reward_type=RewardType.PERCENTAGE,
            reward_value=10.0,  # 10%
            applies_to_level=1,
            is_active=True
        ),
    ]
    
    for rule in rules:
        db.add(rule)
    
    db.commit()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(rules)} –ø—Ä–∞–≤–∏–ª –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π")


def seed_test_users(db):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    users_data = [
        {
            "email": "admin@it-mydoc.ru",
            "phone": "+79991234567",
            "full_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã",
            "password": "admin123",
            "role": "admin",
            "tier": "platinum"
        },
        {
            "email": "cashier@it-mydoc.ru",
            "phone": "+79991234568",
            "full_name": "–ö–∞—Å—Å–∏—Ä –ú–∞—Ä–∏—è",
            "password": "cashier123",
            "role": "cashier",
            "tier": "gold"
        },
        {
            "email": "doctor@it-mydoc.ru",
            "phone": "+79991234569",
            "full_name": "–î–æ–∫—Ç–æ—Ä –ò–≤–∞–Ω–æ–≤",
            "password": "doctor123",
            "role": "doctor",
            "tier": "gold"
        },
        {
            "email": "patient@it-mydoc.ru",
            "phone": "+79991234570",
            "full_name": "–ü–∞—Ü–∏–µ–Ω—Ç –ü–µ—Ç—Ä–æ–≤",
            "password": "patient123",
            "role": "patient",
            "tier": "silver"
        },
    ]
    
    created_users = []
    
    for user_data in users_data:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        existing = db.query(User).filter(User.email == user_data["email"]).first()
        if existing:
            print(f"‚è≠Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['email']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            created_users.append(existing)
            continue
        
        user = User(
            email=user_data["email"],
            phone=user_data["phone"],
            full_name=user_data["full_name"],
            password_hash=get_password_hash(user_data["password"]),
            role=user_data["role"],
            is_active=True,
            is_verified=True
        )
        db.add(user)
        db.flush()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        card_number = f"ML{random.randint(10000000, 99999999)}"
        loyalty = LoyaltyAccount(
            user_id=user.id,
            card_number=card_number,
            card_tier=user_data["tier"],
            points_balance=random.randint(0, 5000),
            cashback_balance=random.uniform(0, 1000)
        )
        db.add(loyalty)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –≤—Ä–∞—á–µ–π
        if user_data["role"] in ["patient", "doctor"]:
            ref_code = ReferralCode(
                user_id=user.id,
                code=f"REF-{user_data['role'][:3].upper()}-{random.randint(1000, 9999)}",
                referrer_type=user_data["role"]
            )
            db.add(ref_code)
        
        created_users.append(user)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['email']} (–ø–∞—Ä–æ–ª—å: {user_data['password']})")
    
    db.commit()
    return created_users


def seed_test_transactions(db, users):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    print("üí≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
    
    patient = next((u for u in users if u.role == "patient"), None)
    if not patient:
        print("‚ö†Ô∏è  –ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        return
    
    account = db.query(LoyaltyAccount).filter(LoyaltyAccount.user_id == patient.id).first()
    if not account:
        print("‚ö†Ô∏è  –ê–∫–∫–∞—É–Ω—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    transactions = [
        {
            "type": TransactionType.ACCRUAL,
            "amount": 500,
            "currency": "points",
            "description": "–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            "source": "registration"
        },
        {
            "type": TransactionType.ACCRUAL,
            "amount": 1000,
            "currency": "points",
            "description": "–ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç",
            "source": "visit"
        },
        {
            "type": TransactionType.ACCRUAL,
            "amount": 250.50,
            "currency": "cashback",
            "description": "–ö–µ—à–±—ç–∫ –∑–∞ —É—Å–ª—É–≥—É –£–ó–ò",
            "source": "purchase"
        },
        {
            "type": TransactionType.DEDUCTION,
            "amount": 300,
            "currency": "points",
            "description": "–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤ –Ω–∞ –ø—Ä–∏–µ–º–µ",
            "source": "manual"
        },
    ]
    
    for trans_data in transactions:
        trans = LoyaltyTransaction(
            account_id=account.id,
            transaction_type=trans_data["type"],
            amount=trans_data["amount"],
            currency=trans_data["currency"],
            description=trans_data["description"],
            source=trans_data["source"]
        )
        db.add(trans)
    
    db.commit()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(transactions)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")


def seed_test_certificates(db, users):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
    print("üéÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
    
    patient = next((u for u in users if u.role == "patient"), None)
    admin = next((u for u in users if u.role == "admin"), None)
    
    if not patient or not admin:
        print("‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
        return
    
    certificates = [
        {
            "code": f"CERT-TEST-{random.randint(10000, 99999)}",
            "initial_amount": 5000,
            "current_amount": 5000,
            "owner_id": patient.id,
            "issued_by_id": admin.id,
            "valid_until": datetime.utcnow() + timedelta(days=365),
            "design_template": "default",
            "message": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –≠—Ç–æ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 5000 —Ä—É–±–ª–µ–π –¥–ª—è –≤–∞—Å!"
        },
        {
            "code": f"CERT-TEST-{random.randint(10000, 99999)}",
            "initial_amount": 3000,
            "current_amount": 1500,
            "owner_id": patient.id,
            "issued_by_id": admin.id,
            "valid_until": datetime.utcnow() + timedelta(days=180),
            "design_template": "birthday",
            "message": "–° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è!"
        },
    ]
    
    for cert_data in certificates:
        cert = Certificate(**cert_data, status=CertificateStatus.ACTIVE)
        db.add(cert)
    
    db.commit()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(certificates)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üå± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –ú–æ—è ‚ù§ —Å–∫–∏–¥–∫–∞")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    create_tables()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î
    db = SessionLocal()
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
        seed_reward_rules(db)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = seed_test_users(db)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        seed_test_transactions(db, users)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        seed_test_certificates(db, users)
        
        print("=" * 60)
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("=" * 60)
        print("\nüìù –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print("\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:")
        print("  Email: admin@it-mydoc.ru")
        print("  –ü–∞—Ä–æ–ª—å: admin123")
        print("\n–ö–∞—Å—Å–∏—Ä:")
        print("  Email: cashier@it-mydoc.ru")
        print("  –ü–∞—Ä–æ–ª—å: cashier123")
        print("\n–î–æ–∫—Ç–æ—Ä:")
        print("  Email: doctor@it-mydoc.ru")
        print("  –ü–∞—Ä–æ–ª—å: doctor123")
        print("\n–ü–∞—Ü–∏–µ–Ω—Ç:")
        print("  Email: patient@it-mydoc.ru")
        print("  –ü–∞—Ä–æ–ª—å: patient123")
        print("\n" + "=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        db.rollback()
        raise
    finally:
        db.close()


if __name__ == "__main__":
    main()